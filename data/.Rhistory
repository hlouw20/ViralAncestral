# Potency of combo - potency of G-BHC = kill rate increase by 8.2%
exp(mod3di$coefficients[4])
# 90% CI
exp(mod3di$coefficients[4] + 1.645*sqrt(vcov(mod3di)[4,4]))
exp(mod3di$coefficients[4] - 1.645*sqrt(vcov(mod3di)[4,4]))
# logit deviance
mod3di$deviance
##c-log-log deviance
mod3fClog <- glm(`Kill Rate` ~ Idose + chem, weights = n, family = binomial(link = "cloglog"), data = df3)
mod3fClog$deviance
# log-log deviance
mod3floglog <- glm(1-`Kill Rate` ~ Idose + chem, weights = n, family = binomial(link = "cloglog"), data = df3)
mod3floglog$deviance
# probit deviance
mod3fProbit <- glm(`Kill Rate` ~ Idose + chem, weights = n, family = binomial(link = "probit"), data = df3)
mod3fProbit$deviance
## c-log-log --> y = log(-log(1-x)) --> x = 1 - exp(exp(-y))
# Potency of combo - potency of DDT = kill rate increase by 14.4%
1 - exp(-exp(mod3fClog$coefficients[3]))
# 90% CI
1 - exp(-exp(mod3fClog$coefficients[3] + 1.645*sqrt(vcov(mod3fClog)[3,3])))
1 - exp(-exp(mod3fClog$coefficients[3] - 1.645*sqrt(vcov(mod3fClog)[3,3])))
# Potency of combo - potency of G-BHC = kill rate increase by 21.1%
1 - exp(-exp(mod3fClog$coefficients[4]))
# 90% CI
1 - exp(-exp(mod3fClog$coefficients[4] + 1.645*sqrt(vcov(mod3fClog)[4,4])))
1 - exp(-exp(mod3fClog$coefficients[4] - 1.645*sqrt(vcov(mod3fClog)[4,4])))
# Potency of combo - potency of DDT = odds of being killed increase by 0.046
exp(-mod3di$coefficients[3])
# Potency of combo - potency of G-BHC = kill rate increase by 8.2%
exp(-mod3di$coefficients[4])
# 90% CI
exp(-mod3di$coefficients[3] + 1.645*sqrt(vcov(mod3di)[3,3]))
exp(-mod3di$coefficients[3] - 1.645*sqrt(vcov(mod3di)[3,3]))
exp(-mod3di$coefficients[3] + 1.645*sqrt(vcov(mod3di)[3,3]))
exp(-mod3di$coefficients[3] - 1.645*sqrt(vcov(mod3di)[3,3]))
# Potency of combo - potency of G-BHC = kill rate increase by 8.2%
exp(-mod3di$coefficients[4])
exp(-mod3di$coefficients[4] + 1.645*sqrt(vcov(mod3di)[4,4]))
exp(-mod3di$coefficients[4] - 1.645*sqrt(vcov(mod3di)[4,4]))
exp(-mod3di$coefficients[3] + 1.645*sqrt(vcov(mod3di)[3,3]))
exp(-mod3di$coefficients[3] - 1.645*sqrt(vcov(mod3di)[3,3]))
exp(-mod3di$coefficients[4])
# 90% CI
exp(-mod3di$coefficients[4] + 1.645*sqrt(vcov(mod3di)[4,4]))
exp(-mod3di$coefficients[4] - 1.645*sqrt(vcov(mod3di)[4,4]))
summary(mod3di)
setwd("~/Desktop/Desktop - Hailey’s MacBook Pro/Grad School/Spring 2023/STAT 850/Homeworks/HW5")
knitr::opts_chunk$set(echo = TRUE)
install.packages("BradleyTerry2", repos = "http://cran.us.r-project.org")
install.packages("dplyr", repos = "http://cran.us.r-project.org")
install.packages("BradleyTerry2", repos = "http://cran.us.r-project.org")
install.packages("leaps", repos = "http://cran.us.r-project.org")
install.packages("car", repos = "http://cran.us.r-project.org")
install.packages("tidyr", repos = "http://cran.us.r-project.org")
install.packages("ggplot2", repos = "http://cran.us.r-project.org")
library(dplyr)
library(leaps)
library(BradleyTerry2)
library(car)
library(tidyr)
library(ggplot2)
library(boot)
# Create total kids category to get integer values
fiji <- read.table("fiji.txt", header=TRUE)
fiji <- fiji %>% filter(tot != 0)
fiji$abode <- as.factor(fiji$abode)
fiji$marriage <- as.factor(fiji$marriage)
fiji$edu <- as.factor(fiji$edu)
fiji$totalKids <- round(fiji$average*fiji$tot, digits = 0)
# Fit regular poisson with total number in group as offset
glmA <- glm(totalKids ~ offset(log(tot)) + marriage + edu + abode, family = poisson, data=fiji)
summary(glmA)
# Deviance test
qchisq(.05, 36) - glmA$deviance
pchisq(glmA$deviance, df=glmA$df.residual, lower.tail=FALSE)
# Create total kids category to get integer values
fiji <- read.table("fiji.txt", header=TRUE)
fiji <- fiji %>% filter(tot != 0)
fiji$abode <- as.factor(fiji$abode)
fiji$marriage <- as.factor(fiji$marriage)
fiji$edu <- as.factor(fiji$edu)
fiji$totalKids <- round(fiji$average*fiji$tot, digits = 0)
# Fit regular poisson with total number in group as offset
glmA <- glm(totalKids ~ offset(log(tot)) + marriage + edu + abode, family = quasipoisson, data=fiji)
summary(glmA)
# Deviance test
qchisq(.05, 36) - glmA$deviance
pchisq(glmA$deviance, df=glmA$df.residual, lower.tail=FALSE)
glmA$null.deviance - glmA$deviance
qchisq(0.05, 8)
uphat
lohat
edRural <- data.frame(tot = 1, marriage = 6, edu = 3, abode = 1)
edRural$abode <- as.factor(edRural$abode)
edRural$marriage <- as.factor(edRural$marriage)
edRural$edu <- as.factor(edRural$edu)
pnew = predict.glm(glmA, edRural, se.fit=T, type="link")
# Estimated mean
exp(pnew$fit)
# CI
uphat = exp(mean(pnew$fit) + 1.645*pnew$se.fit)
lohat = exp(mean(pnew$fit) - 1.645*pnew$se.fit)
uphat
lohat
setwd("~/Desktop/Desktop - Hailey’s MacBook Pro/Grad School/Spring 2023/STAT 850/Homeworks/HW5")
knitr::opts_chunk$set(echo = TRUE)
install.packages("BradleyTerry2", repos = "http://cran.us.r-project.org")
install.packages("dplyr", repos = "http://cran.us.r-project.org")
install.packages("BradleyTerry2", repos = "http://cran.us.r-project.org")
install.packages("leaps", repos = "http://cran.us.r-project.org")
install.packages("car", repos = "http://cran.us.r-project.org")
install.packages("tidyr", repos = "http://cran.us.r-project.org")
install.packages("ggplot2", repos = "http://cran.us.r-project.org")
library(dplyr)
library(leaps)
library(BradleyTerry2)
library(car)
library(tidyr)
library(ggplot2)
library(boot)
# Potency of combo - potency of DDT = odds of being killed increase by 0.046
exp(-mod3di$coefficients[3])
# 90% CI
exp(-mod3di$coefficients[3] + 1.645*sqrt(vcov(mod3di)[3,3]))
exp(-mod3di$coefficients[3] - 1.645*sqrt(vcov(mod3di)[3,3]))
# Potency of combo - potency of G-BHC = kill rate increase by 8.2%
exp(-mod3di$coefficients[4])
# 90% CI
exp(-mod3di$coefficients[4] + 1.645*sqrt(vcov(mod3di)[4,4]))
exp(-mod3di$coefficients[4] - 1.645*sqrt(vcov(mod3di)[4,4]))
plot(audibility$acc, type = "h")
setwd("~/Desktop/Desktop - Hailey’s MacBook Pro/Grad School/Spring 2023/STAT 850/Final")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(ggplot2)
library(faraway)
library(Hmisc)
library(leaps)
library(broom)
library(glmnet)
library(dplyr)
library(lme4)
library(ggplot2)
library(MASS)
library(kableExtra)
library(lemon)
library(car)
library(pROC)
library(caret)
library(ISLR)
audibility <- read.csv("audibility.csv")
food <- read.csv("common_household_food.txt", header = TRUE)
food <- food[-962,-1]
Carrier <- c("a_F1", "a_F2", "i_F1", "i_F2", "u_F1", "u_F2", "s", "sh")
`Dominant Pitch` <- c("low", "medium", "low", "medium", "low", "medium", "high", "high")
pitches <- as.data.frame(cbind(Carrier, `Dominant Pitch`))
kable(pitches, caption = "Carrier Types and Dominant Pitch Level") %>%
kable_styling(position = "center", latex_options = "HOLD_position")
audibility$aud <- as.factor(ifelse(audibility$SL > 0, 1, 0))
audibility$Rp <- as.factor(ifelse(audibility$Rayleigh < 0.05, 1, 0))
audibility$Fp <- as.factor(ifelse(audibility$Ftest < 0.05, 1, 0))
audibility$Carrier <- as.factor(audibility$Carrier)
audibility$SPL <- as.factor(audibility$SPL)
# compare audibility with whether there was an EFR
# audibility = 1 ^ p < 0.05
# logistic regression for audibility based on these tests
audMod <- glm(aud ~ Rp*Fp, family = "binomial", data = audibility)
audMod %>%
tidy() %>%
kable(
caption = "Audibility Detection by Rayleigh Test and F-Test for EFR",
col.names = c("Predictor", "B", "SE", "Z", "p"),
digits = c(0, 2, 3, 2, 3)
) %>% kable_styling(font_size = 7, position = "center", latex_options = "HOLD_position")
audibility$acc <- ifelse(audibility$aud == 1 & (audibility$Rp == 1 | audibility$Fp == 1), 1, ifelse(audibility$aud == 0 & audibility$Rp == 0 & audibility$Fp == 0, 1, 0))
#audibility$Carrierprop <- ifelse(audibility$Carrier == "a_F1", 49/(35+49), ifelse(audibility$Carrier == "a_F2", 57/(57+27), ifelse(audibility$Carrier == "i_F1", 60/(60+24), ifelse(audibility$Carrier == "i_F2", 64/(64+20), ifelse(audibility$Carrier == "s", 80/84, ifelse(audibility$Carrier == "sh", 69/(69+15), ifelse(audibility$Carrier == "u_F1", 57/(57+27), ifelse(audibility$Carrier == "u_F2", 56/(28+56), 0))))))))
#anova(lm(acc ~ Carrier, data = audibility))
CarMod <- lm(acc ~ Carrier, data = audibility)
CarMod %>%
tidy() %>%
kable(
caption = "Accurate Test Probability by Carrier Group",
col.names = c("Carrier", "B", "SE", "t", "p"),
digits = c(0, 2, 3, 2, 3)
) %>% kable_styling(font_size = 7, position = "center", latex_options = "HOLD_position")
plot(audibility$acc, type = "h")
accdat <- audibility %>% pivot_longer(cols=c(acc, Fp, Rp),
names_to='Test',
values_to='Acc')
accdat <- audibility %>% pivot_longer(cols=c('acc', 'Fp', 'Rp'),
names_to='Test',
values_to='Acc')
View(audibility)
RpAcc <- ifelse(audibility$Rp == 1 & audibility$acc == 1, 1, 0)
values_to='col2_name')
dim(RpAcc)
class(RpAcc)
RpAcc <- as.data.frame(ifelse(audibility$Rp == 1 & audibility$acc == 1, 1, 0))
dim(RpAcc)
FpAcc <- as.data.frame(ifelse(audibility$Fp == 1 & audibility$acc == 1, 1, 0))
accMat <- cbind(RpAcc, FpAcc)
View(audibility)
View(accMat)
colnames(accMat) <- c("Rp Acc", "Fp Acc")
accMat <- accMat %>% pivot_longer(cols = c('Rp Acc', 'Fp Acc'), names_to = "Test", values_to = "Accurate")
View(accMat)
plot(accMat$Accurate ~ accMat$Test)
boxplot(accMat$Accurate ~ accMat$Test)
barplot(audibility$acc)
boxplot(accMat$Accurate ~ accMat$Test)
boxplot(count(accMat$Accurate) ~ accMat$Test)
class(accMat$Accurate)
accMat$Accurate <- as.factor(accMat$Accurate)
boxplot(count(accMat$Accurate) ~ accMat$Test)
accMat <- cbind(RpAcc, FpAcc)
colnames(accMat) <- c("Rp Acc", "Fp Acc")
accMat <- accMat %>% pivot_longer(cols = c('Rp Acc', 'Fp Acc'), names_to = "Test", values_to = "Accurate")
boxplot(sum(accMat$Accurate) ~ accMat$Test)
tbl <- with(accMat, table(Test, Accurate))
tbl
barplot(tbl, beside = TRUE, legend = TRUE)
tbl <- with(accMat, table(Test, Accurate==1))
tbl
RpAcc <- as.data.frame(ifelse(audibility$Rp == 1 & audibility$acc == 1, 1, 0))
FpAcc <- as.data.frame(ifelse(audibility$Fp == 1 & audibility$acc == 1, 1, 0))
accMat <- cbind(RpAcc, FpAcc)
colnames(accMat) <- c("Rp", "Fp")
accMat <- accMat %>% pivot_longer(cols = c('Rp', 'Fp'), names_to = "Test", values_to = "Accurate")
tbl <- with(accMat, table(Test, Accurate))
barplot(tbl, beside = TRUE, legend = TRUE)
barplot(tbl, beside = TRUE, legend = ('topright'), legend.text = c("F Test", "Rayleigh"))
barplot(tbl, beside = TRUE, legend = ('topright', legend.text = c("F Test", "Rayleigh")))
barplot(tbl, beside = TRUE)
legend ('topright', legend.text = c("F Test", "Rayleigh"))
barplot(tbl, beside = TRUE)
legend('topright', legend = c("F Test", "Rayleigh"))
audibility$acc <- ifelse(audibility$aud == 1 & (audibility$Rp == 1 | audibility$Fp == 1), 1, ifelse(audibility$aud == 0 & audibility$Rp == 0 & audibility$Fp == 0, 1, 0))
#audibility$Carrierprop <- ifelse(audibility$Carrier == "a_F1", 49/(35+49), ifelse(audibility$Carrier == "a_F2", 57/(57+27), ifelse(audibility$Carrier == "i_F1", 60/(60+24), ifelse(audibility$Carrier == "i_F2", 64/(64+20), ifelse(audibility$Carrier == "s", 80/84, ifelse(audibility$Carrier == "sh", 69/(69+15), ifelse(audibility$Carrier == "u_F1", 57/(57+27), ifelse(audibility$Carrier == "u_F2", 56/(28+56), 0))))))))
#anova(lm(acc ~ Carrier, data = audibility))
CarMod <- lm(acc ~ Carrier, data = audibility)
CarMod %>%
tidy() %>%
kable(
caption = "Accurate Test Probability by Carrier Group",
col.names = c("Carrier", "B", "SE", "t", "p"),
digits = c(0, 2, 3, 2, 3)
) %>% kable_styling(font_size = 7, position = "center", latex_options = "HOLD_position")
RpAcc <- as.data.frame(ifelse(audibility$Rp == 1 & audibility$acc == 1, 1, 0))
FpAcc <- as.data.frame(ifelse(audibility$Fp == 1 & audibility$acc == 1, 1, 0))
accMat <- cbind(RpAcc, FpAcc)
colnames(accMat) <- c("Rp", "Fp")
accMat <- accMat %>% pivot_longer(cols = c('Rp', 'Fp'), names_to = "Test", values_to = "Accurate")
tbl <- with(accMat, table(Test, Accurate))
barplot(tbl, beside = TRUE)
legend('topright', legend = c("F Test", "Rayleigh"))
legend('right', legend = c("F Test", "Rayleigh"))
barplot(tbl, beside = TRUE)
legend('right', legend = c("F Test", "Rayleigh"))
barplot(tbl, beside = TRUE)
legend(0, 300, legend = c("F Test", "Rayleigh"))
barplot(tbl, beside = TRUE)
legend(30, 1000, legend = c("F Test", "Rayleigh"))
barplot(tbl, beside = TRUE)
legend(30, 500, legend = c("F Test", "Rayleigh"))
legend(30, 400, legend = c("F Test", "Rayleigh"))
barplot(tbl, beside = TRUE)
legend(30, 400, legend = c("F Test", "Rayleigh"))
barplot(tbl, beside = TRUE)
legend(2, 400, legend = c("F Test", "Rayleigh"))
barplot(tbl, beside = TRUE)
legend(2, 500, legend = c("F Test", "Rayleigh"))
tbl <- with(accMat, table(Test, Accurate))
barplot(tbl, beside = TRUE)
legend(2, 550, legend = c("F Test", "Rayleigh"))
legend(2, 400, legend = c("F Test", "Rayleigh"))
barplot(tbl, beside = TRUE)
legend(2, 400, legend = c("F Test", "Rayleigh"))
barplot(tbl, beside = TRUE)
legend('topleft', legend = c("F Test", "Rayleigh"))
barplot(tbl, beside = TRUE, ylim = 500)
barplot(tbl, beside = TRUE, height = 1)
legend('topleft', legend = c("F Test", "Rayleigh"))
barplot(tbl, width = 0.8, beside = TRUE, horiz = TRUE)
barplot(tbl, width = 0.8, beside = TRUE, horiz = TRUE)
legend('bottomright', legend = c("F Test", "Rayleigh"))
barplot(tbl, width = 0.8, beside = TRUE, horiz = TRUE)
legend('topleft', legend = c("F Test", "Rayleigh"))
barplot(tbl, width = 0.8, beside = TRUE, horiz = TRUE)
legend('botomright', inset=c(-0.2, 0), legend = c("F Test", "Rayleigh"))
barplot(tbl, width = 0.8, beside = TRUE, horiz = TRUE)
legend('bottomright', inset=c(-0.2, 0), legend = c("F Test", "Rayleigh"))
barplot(tbl, width = 0.8, beside = TRUE, horiz = TRUE)
legend('bottomright', inset=c(0, 0), legend = c("F Test", "Rayleigh"))
legend('bottomright', inset=c(.1, 0), legend = c("F Test", "Rayleigh"))
barplot(tbl, width = 0.8, beside = TRUE, horiz = TRUE)
legend('bottomright', inset=c(.1, 0), legend = c("F Test", "Rayleigh"))
legend('bottomright', inset=c(-0.1, 0), legend = c("F Test", "Rayleigh"))
barplot(tbl, width = 0.8, beside = TRUE, horiz = TRUE)
legend('bottomright', inset=c(-0.1, 0), legend = c("F Test", "Rayleigh"))
barplot(tbl, width = 0.8, beside = TRUE, horiz = TRUE)
legend('bottomright', inset=c(-1, 0), legend = c("F Test", "Rayleigh"))
barplot(tbl, width = 0.8, beside = TRUE, horiz = TRUE)
legend('bottomright', inset=c(-.1, 0), legend = c("F Test", "Rayleigh"))
legend('bottomright', inset=c(0, -.1), legend = c("F Test", "Rayleigh"))
barplot(tbl, width = 0.8, beside = TRUE, horiz = TRUE)
legend('bottomright', inset=c(0, -.1), legend = c("F Test", "Rayleigh"))
barplot(tbl, width = 0.8, beside = TRUE, horiz = TRUE)
legend('bottomright', inset=c(.5, -.5), legend = c("F Test", "Rayleigh"))
par(mar=c(5, 4, 4, 8), xpd=TRUE)
barplot(tbl, width = 0.8, beside = TRUE, horiz = TRUE)
legend('bottomright', inset=c(0, -.2), legend = c("F Test", "Rayleigh"))
par(mar=c(5, 4, 4, 8), xpd=TRUE)
barplot(tbl, width = 0.8, beside = TRUE, horiz = TRUE)
legend('bottomright', inset=c(0, -1), legend = c("F Test", "Rayleigh"))
par(mar=c(5, 4, 4, 8), xpd=TRUE)
barplot(tbl, width = 0.8, beside = TRUE, horiz = TRUE)
legend('bottomright', inset=c(-.5, 0), legend = c("F Test", "Rayleigh"))
par(mar=c(5, 4, 4, 8))
barplot(tbl, width = 0.8, beside = TRUE, horiz = TRUE)
legend('bottomright', inset=c(-.5, 0), legend = c("F Test", "Rayleigh"))
par(mar=c(5, 4, 4, 8), xpd = TRUE)
barplot(tbl, width = 0.8, beside = TRUE, horiz = TRUE)
legend('bottomright', inset=c(-.5, 0), legend = c("F Test", "Rayleigh"))
par(mar=c(5, 4, 4, 8), xpd = TRUE)
barplot(tbl, width = 0.8, beside = TRUE, horiz = TRUE)
legend('bottomright', inset=c(-.2, 0), legend = c("F Test", "Rayleigh"), col = c("blue", "red"))
par(mar=c(5, 4, 4, 8), xpd = TRUE)
barplot(tbl, width = 0.8, beside = TRUE, horiz = TRUE)
legend('bottomright', inset=c(-.2, 0), legend = c("F Test", "Rayleigh"))
par(mar=c(5, 4, 4, 8), xpd = NA)
barplot(tbl, width = 0.8, beside = TRUE, horiz = TRUE)
legend('bottomright', inset=c(-.2, 0), legend = c("F Test", "Rayleigh"))
ggplot(data=accMat, aes(x=Accurate, y=Test)) +
geom_bar(stat="identity", width=0.5)
ggplot(data=accMat, aes(x=Accurate, y=Test, fill = Test)) +
geom_bar(stat="identity", width=0.5)
ggplot(data=accMat, aes(x=Accurate, y=Test)) +
geom_bar(stat="identity", width=0.5)
ggplot(data=accMat, aes(x=Accurate, y=Test)) +
geom_bar(stat="identity", width=0.5) + xlab("Number of Accurate Results")
RpAcc <- as.data.frame(ifelse(audibility$Rp == 1 & audibility$acc == 1, 1, 0))
FpAcc <- as.data.frame(ifelse(audibility$Fp == 1 & audibility$acc == 1, 1, 0))
accMat <- cbind(RpAcc, FpAcc)
colnames(accMat) <- c("Rayleigh", "F-Test")
accMat <- accMat %>% pivot_longer(cols = c('Rayleigh', 'F-Test'), names_to = "Test", values_to = "Accurate")
ggplot(data=accMat, aes(x=Accurate, y=Test)) +
geom_bar(stat="identity", width=0.5) + xlab("Number of Accurate Results")
ggplot(data=accMat, aes(x=Accurate, y=Test)) +
geom_bar(stat="identity", width=0.5, fill = "black") + xlab("Number of Accurate Results")
#t.test((audibility$Fp == 1 & audibility$aud == 1), (audibility$Rp == 1 & audibility$aud == 1), alternative = "two.sided", paired = TRUE, conf.level = 0.95)
RpAcc <- as.data.frame(ifelse(audibility$Rp == 1 & audibility$acc == 1, 1, 0))
FpAcc <- as.data.frame(ifelse(audibility$Fp == 1 & audibility$acc == 1, 1, 0))
accMat <- cbind(RpAcc, FpAcc)
colnames(accMat) <- c("Rayleigh", "F-Test")
accMat <- accMat %>% pivot_longer(cols = c('Rayleigh', 'F-Test'), names_to = "Test", values_to = "Accurate")
ggplot(data=accMat, aes(x=Accurate, y=Test)) +
geom_bar(stat="identity", width=0.5, fill = "black") + xlab("Number of Accurate Results")
boxplot(audibility$acc ~ audibility$Participant)
plot(sum(audibility$acc))
boxplot(audibility$Rp ~ audibility$Participant)
plot(audibility$acc)
hist(audibility$acc)
audibility$acc <- ifelse(audibility$aud == 1 & (audibility$Rp == 1 | audibility$Fp == 1), 1, ifelse(audibility$aud == 0 & audibility$Rp == 0 & audibility$Fp == 0, 1, 0))
hist(audibility$acc, xlab = "Inaccurate (0) vs. Accurate (1)", ylab = "# of Obs.")
audibility$acc <- ifelse(audibility$aud == 1 & (audibility$Rp == 1 | audibility$Fp == 1), 1, ifelse(audibility$aud == 0 & audibility$Rp == 0 & audibility$Fp == 0, 1, 0))
hist(audibility$acc, xlab = "Inaccurate (0) vs. Accurate (1)", ylab = "# of Obs.")
audibility$acc <- ifelse(audibility$aud == 1 & (audibility$Rp == 1 | audibility$Fp == 1), 1, ifelse(audibility$aud == 0 & audibility$Rp == 0 & audibility$Fp == 0, 1, 0))
hist(audibility$acc, xlab = "Inaccurate (0) vs. Accurate (1)", ylab = "# of Obs.", main = NULL)
hist(audibility$acc, xlab = "Inaccurate (0) vs. Accurate (1)", ylab = "# of Obs.", main = NULL, xlim = 0:1(breaks = 1))
audibility$acc <- ifelse(audibility$aud == 1 & (audibility$Rp == 1 | audibility$Fp == 1), 1, ifelse(audibility$aud == 0 & audibility$Rp == 0 & audibility$Fp == 0, 1, 0))
hist(audibility$acc, xlab = "Inaccurate (0) vs. Accurate (1)", ylab = "# of Obs.", main = NULL, breaks = c(0,1))
audibility$acc <- ifelse(audibility$aud == 1 & (audibility$Rp == 1 | audibility$Fp == 1), 1, ifelse(audibility$aud == 0 & audibility$Rp == 0 & audibility$Fp == 0, 1, 0))
hist(audibility$acc, xlab = "Inaccurate (0) vs. Accurate (1)", ylab = "# of Obs.", main = NULL)
hist(audibility$acc, xlab = "Inaccurate (0) vs. Accurate (1)", ylab = "# of Obs.", main = NULL, xaxt = "n")
axis(1, at = c(0, 1))
View(audibility)
summary(glm(Rp ~ SL + SL**2, family = "binomial", data = audibility))
summary(glm(Rp ~ SL + SL^2, family = "binomial", data = audibility))
summary(glm(Rp ~ SL + I(SL^2), family = "binomial", data = audibility))
0.128/0.0008
dim(food)
food$KCal <- replace(food$KCal, food$KCal == 0, 1)
hist(log(newfood$KCal), xlab = "log(KCal)", main = NULL)
# remove influential points and outliers
newfood <- food[-c(413, 436, 499, 554),]
LB <- quantile(food$KCal, 1/4) - (1.5*IQR(food$KCal))
UB <- quantile(food$KCal, 3/4) + (1.5*IQR(food$KCal))
newfood <- food %>% filter(KCal > LB)
food$KCal <- replace(food$KCal, food$KCal == 0, 1)
hist(log(newfood$KCal), xlab = "log(KCal)", main = NULL)
food$KCal <- replace(food$KCal, food$KCal == 0, 1)
hist(log(newfood$KCal), xlab = "log(KCal)", main = NULL)
# replace 0 kcal foods with 1 kcal since it's the same and allows us to do a log transform
food$KCal <- replace(food$KCal, food$KCal == 0, 1)
newfood <- food[-c(413, 436, 499, 554),]
LB <- quantile(food$KCal, 1/4) - (1.5*IQR(food$KCal))
UB <- quantile(food$KCal, 3/4) + (1.5*IQR(food$KCal))
newfood <- food %>% filter(KCal > LB)
newfood <- food %>% filter(KCal < UB)
labels3 <- c("Model 1", "Model 2", "Model 3", "Model 4")
meanfood <- c(123.56, 125.18, 109.06, 101.15)
cifood <- c("[69, 177]", "[102, 147]", "[101, 116]", "[95, 107]")
guessfood <- cbind(labels3, meanfood, cifood)
colnames(guessfood) <- c("Model", "Predicted KCal", "95% Prediction Interval")
guessfood <- as.data.frame(guessfood)
kable(guessfood) %>% kable_styling(font_size = 8, position = "center", latex_options = "HOLD_position")
summary(reMod)
reMod <- glmer(acc ~ Rp + Fp + (1 | Participant), data = audibility, family = "binomial")
Test <- c("Intercept", "Rayleigh", "F-test")
B <- c(-0.5291, 2.3082, 2.7632)
SE <- c(0.1257, 0.4112, 0.5449)
z <- c(-4.210, 5.614, 5.071)
p <- c("< 0.001", "< 0.001", "< 0.001")
summs <- as.data.frame(cbind(Test, B, SE, z, p))
kable(summs, caption = "Fixed Effects with Randomness from Participant") %>%
kable_styling(position = "center", latex_options = "HOLD_position")
summary(reMod)
#t.test((audibility$Fp == 1 & audibility$aud == 1), (audibility$Rp == 1 & audibility$aud == 1), alternative = "two.sided", paired = TRUE, conf.level = 0.95)
RpAcc <- as.data.frame(ifelse(audibility$Rp == 1 & audibility$acc == 1, 1, 0))
FpAcc <- as.data.frame(ifelse(audibility$Fp == 1 & audibility$acc == 1, 1, 0))
accMat <- cbind(RpAcc, FpAcc)
colnames(accMat) <- c("Rayleigh", "F-Test")
accMat <- accMat %>% pivot_longer(cols = c('Rayleigh', 'F-Test'), names_to = "Test", values_to = "Accurate")
ggplot(data=accMat, aes(x=Accurate, y=Test)) +
geom_bar(stat="identity", width=0.5, fill = "black") + xlab("Number of Accurate Results") + theme_bw()
View(bdata)
View(baseballModel2)
# Make fasta files for each well-studied IRES type
dat2fasta(ires1_for_repAA, outfile = "ires1_for_repAA.fasta")
library(Biostrings)
library(dplyr)
# Make fasta files for each well-studied IRES type
dat2fasta(ires1_for_repAA, outfile = "ires1_for_repAA.fasta")
# Read in packages
install.packages("Biostrings")
# Read in packages
install.packages("Biostrings")
install.packages("phylotools")
install.packages("tidyverse")
library(Biostrings)
library(phylotools)
library(dplyr)
library(tidyr)
library(stringr)
# Set wd
setwd("~/Desktop/ViralAncestral/data")
# Use 5UTR' Region nucleotide data to filter individual sequences
fiveUTR <- readDNAStringSet("./5UTR_Region/picornaviridae2_5UTR_with_outgroup.fasta")
seq_name <- names(fiveUTR)
sequence <- paste(fiveUTR)
df <- data.frame(seq_name, sequence)
# Identify IRES subtypes
ires <- read.table("IRES_list.txt", fill = TRUE, sep = ",", header = FALSE)
ires <- ires %>% separate(V2, c("Name1", "Name2", "Name3", "Name4"))
# Manually impute values for obs that have excess information
ires$Name4[5] <- "IRES5"
ires$Name4[23] <- "IRES1"
ires$Name4[33] <- "IRES0"
ires$Name4[34] <- "IRES0"
ires$Name4[47] <- "IRES0"
ires$Name4[62] <- "IRES2"
ires$Name4[100] <- "IRES2"
# Filtering IRES subtypes
ires0 <- ires %>% filter(Name4 == "IRES0")
ires0$V1 <-gsub(">","",as.character(ires0$V1))
ires1 <- ires %>% filter(Name4 == "IRES1")
ires1$V1 <-gsub(">","",as.character(ires1$V1))
ires2 <- ires %>% filter(Name4 == "IRES2")
ires2$V1 <-gsub(">","",as.character(ires2$V1))
ires3 <- ires %>% filter(Name4 == "IRES3")
ires3$V1 <-gsub(">","",as.character(ires3$V1))
ires4 <- ires %>% filter(Name4 == "IRES4")
ires4$V1 <-gsub(">","",as.character(ires4$V1))
ires5 <- ires %>% filter(Name4 == "IRES5")
ires5$V1 <-gsub(">","",as.character(ires5$V1))
# Make data frames of IRES subtypes
df[c("Main", "Other")] <- str_split_fixed(df$seq_name, '_', 2)
df[c("Other", "Extra")] <- str_split_fixed(df$Other, ',', 2)
ires0[c('Main', 'Other')] <- str_split_fixed(ires0$V1, '_', 2)
df0 <- df %>% filter(Other %in% ires0$Other)
df0 <- df0[,c(1:2)]
ires1[c('Main', 'Other')] <- str_split_fixed(ires1$V1, '_', 2)
df1 <- df %>% filter(Other %in% ires1$Other)
df1 <- df1[,c(1:2)]
ires2[c('Main', 'Other')] <- str_split_fixed(ires2$V1, '_', 2)
df2 <- df %>% filter(Other %in% ires2$Other)
df2 <- df2[,c(1:2)]
ires3[c('Main', 'Other')] <- str_split_fixed(ires3$V1, '_', 2)
df3 <- df %>% filter(Other %in% ires3$Other)
df3 <- df3[,c(1:2)]
ires4[c('Main', 'Other')] <- str_split_fixed(ires4$V1, '_', 2)
df4 <- df %>% filter(Other %in% ires4$Other)
df4 <- df4[,c(1:2)]
ires5[c('Main', 'Other')] <- str_split_fixed(ires5$V1, '_', 2)
df5 <- df %>% filter(Other %in% ires5$Other)
df5 <- df5[,c(1:2)]
# Make new df to create fasta file outputs
newdf <- read.fasta("./5UTR_Region/picornaviridae2_5UTR_with_outgroup.fasta")
# fasta files for IRES type from 5'UTR region
# location of sequences the same between Replicase Gene and 5'UTR Region - so will use for replicase gene too with respect to filtering
setwd("~/Desktop/ViralAncestral/data/5UTR_Region/IRES_Subtypes")
# fasta files for IRES type from 5'UTR region
# location of sequences the same between Replicase Gene and 5'UTR Region - so will use for replicase gene too with respect to filtering
setwd("Users/haileylouw/Desktop/ViralAncestral/data/5UTR_Region/IRES_Subtypes")
# fasta files for IRES type from 5'UTR region
# location of sequences the same between Replicase Gene and 5'UTR Region - so will use for replicase gene too with respect to filtering
setwd("Users/haileylouw/Desktop/ViralAncestral/data/5UTR_Region")
# Read in packages
install.packages("Biostrings")
install.packages("phylotools")
install.packages("tidyverse")
